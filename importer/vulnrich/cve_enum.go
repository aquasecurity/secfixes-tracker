// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package vulnrich

import (
	"errors"
	"fmt"
)

const (
	// AffectedStatusAffected is a AffectedStatus of type affected.
	AffectedStatusAffected AffectedStatus = "affected"
	// AffectedStatusUnaffected is a AffectedStatus of type unaffected.
	AffectedStatusUnaffected AffectedStatus = "unaffected"
	// AffectedStatusUnknown is a AffectedStatus of type unknown.
	AffectedStatusUnknown AffectedStatus = "unknown"
)

var ErrInvalidAffectedStatus = errors.New("not a valid AffectedStatus")

// String implements the Stringer interface.
func (x AffectedStatus) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x AffectedStatus) IsValid() bool {
	_, err := ParseAffectedStatus(string(x))
	return err == nil
}

var _AffectedStatusValue = map[string]AffectedStatus{
	"affected":   AffectedStatusAffected,
	"unaffected": AffectedStatusUnaffected,
	"unknown":    AffectedStatusUnknown,
}

// ParseAffectedStatus attempts to convert a string to a AffectedStatus.
func ParseAffectedStatus(name string) (AffectedStatus, error) {
	if x, ok := _AffectedStatusValue[name]; ok {
		return x, nil
	}
	return AffectedStatus(""), fmt.Errorf("%s is %w", name, ErrInvalidAffectedStatus)
}

// MarshalText implements the text marshaller method.
func (x AffectedStatus) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *AffectedStatus) UnmarshalText(text []byte) error {
	tmp, err := ParseAffectedStatus(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

const (
	// CveStatePUBLISHED is a CveState of type PUBLISHED.
	CveStatePUBLISHED CveState = "PUBLISHED"
	// CveStateREJECTED is a CveState of type REJECTED.
	CveStateREJECTED CveState = "REJECTED"
)

var ErrInvalidCveState = errors.New("not a valid CveState")

// String implements the Stringer interface.
func (x CveState) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x CveState) IsValid() bool {
	_, err := ParseCveState(string(x))
	return err == nil
}

var _CveStateValue = map[string]CveState{
	"PUBLISHED": CveStatePUBLISHED,
	"REJECTED":  CveStateREJECTED,
}

// ParseCveState attempts to convert a string to a CveState.
func ParseCveState(name string) (CveState, error) {
	if x, ok := _CveStateValue[name]; ok {
		return x, nil
	}
	return CveState(""), fmt.Errorf("%s is %w", name, ErrInvalidCveState)
}

// MarshalText implements the text marshaller method.
func (x CveState) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *CveState) UnmarshalText(text []byte) error {
	tmp, err := ParseCveState(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

const (
	// CvssSeverityNONE is a CvssSeverity of type NONE.
	CvssSeverityNONE CvssSeverity = "NONE"
	// CvssSeverityLOW is a CvssSeverity of type LOW.
	CvssSeverityLOW CvssSeverity = "LOW"
	// CvssSeverityMEDIUM is a CvssSeverity of type MEDIUM.
	CvssSeverityMEDIUM CvssSeverity = "MEDIUM"
	// CvssSeverityHIGH is a CvssSeverity of type HIGH.
	CvssSeverityHIGH CvssSeverity = "HIGH"
	// CvssSeverityCRITICAL is a CvssSeverity of type CRITICAL.
	CvssSeverityCRITICAL CvssSeverity = "CRITICAL"
)

var ErrInvalidCvssSeverity = errors.New("not a valid CvssSeverity")

// String implements the Stringer interface.
func (x CvssSeverity) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x CvssSeverity) IsValid() bool {
	_, err := ParseCvssSeverity(string(x))
	return err == nil
}

var _CvssSeverityValue = map[string]CvssSeverity{
	"NONE":     CvssSeverityNONE,
	"LOW":      CvssSeverityLOW,
	"MEDIUM":   CvssSeverityMEDIUM,
	"HIGH":     CvssSeverityHIGH,
	"CRITICAL": CvssSeverityCRITICAL,
}

// ParseCvssSeverity attempts to convert a string to a CvssSeverity.
func ParseCvssSeverity(name string) (CvssSeverity, error) {
	if x, ok := _CvssSeverityValue[name]; ok {
		return x, nil
	}
	return CvssSeverity(""), fmt.Errorf("%s is %w", name, ErrInvalidCvssSeverity)
}

// MarshalText implements the text marshaller method.
func (x CvssSeverity) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *CvssSeverity) UnmarshalText(text []byte) error {
	tmp, err := ParseCvssSeverity(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
